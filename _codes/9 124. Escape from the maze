문제설명
1 x 1 크기의 칸들로 이루어진 직사각형 격자 형태의 미로에서 탈출하려고 합니다.
각 칸은 통로 또는 벽으로 구성되어 있으며, 벽으로 된 칸은 지나갈 수 없고 통로로 된 칸으로만 이동할 수 있습니다.
통로들 중 한 칸에는 미로를 빠져나가는 문이 있는데, 이 문은 레버를 당겨서만 열 수 있습니다.
레버 또한 통로들 중 한 칸에 있습니다.
따라서, 출발 지점에서 먼저 레버가 있는 칸으로 이동하여 레버를 당긴 후 미로를 빠져나가는 문이 있는 칸으로 이동하면 됩니다.
이때 아직 레버를 당기지 않았더라도 출구가 있는 칸을 지나갈 수 있습니다.
미로에서 한 칸을 이동하는데 1초가 걸린다고 할 때, 최대한 빠르게 미로를 빠져나가는데 걸리는 시간을 구하려 합니다.

미로를 나타낸 문자열 배열 maps가 매개변수로 주어질 때, 미로를 탈출하는데 필요한 최소 시간을 return 하는 solution 함수를 완성해주세요. 만약, 탈출할 수 없다면 -1을 return 해주세요.

제한사항
5 ≤ maps의 길이 ≤ 100
5 ≤ maps[i]의 길이 ≤ 100
maps[i]는 다음 5개의 문자들로만 이루어져 있습니다.
S : 시작 지점
E : 출구
L : 레버
O : 통로
X : 벽
시작 지점과 출구, 레버는 항상 다른 곳에 존재하며 한 개씩만 존재합니다.
출구는 레버가 당겨지지 않아도 지나갈 수 있으며, 모든 통로, 출구, 레버, 시작점은 여러 번 지나갈 수 있습니다.

Problem Description
I'm trying to escape from a labyrinth in the form of a rectangular grid of 1 x 1 cells.
Each compartment consists of a walkway or wall, and the walled compartment cannot pass through, but can only be moved to the aisle compartment.
In one of the passages is a door that exits the maze, which can only be opened by pulling the lever.
The lever is also in one of the passages.
Therefore, from the starting point, go to the compartment with the lever, pull the lever, and then go to the compartment with the door to exit the maze.
At this time, even if you haven't pulled the lever yet, you can pass through the compartment with the exit.
When it takes a second to move one space from the maze, we try to find the time it takes to get out of the maze as fast as possible.

Complete a solution function that returns the minimum time required to escape from the maze, given the array map of strings representing the maze as a parameter. If you cannot escape, return -1.

Restrictions
5 ≤ lengths of maps ≤ 100
length of 5 ≤ maps[i] ≤ 100
maps[i] consists of only the following five characters.
S : Starting point
E : Exit
L : Lever
O : Passage
X: Wall
The starting point, outlet, and lever are always in different places and only one.
The exits can be passed without the lever being pulled, and all passages, exits, levers, and starting points can be passed multiple times.

using System;
using System.Collections.Generic;

public class Solution 
{
    public int solution(string[] maps) 
    {
        int[] start = FindPosition(maps, 'S');
        int[] lever = FindPosition(maps, 'L');
        int[] exit = FindPosition(maps, 'E');

        // 시작 지점에서 레버까지의 최단 거리
        int startToLever = BFS(maps, start, lever);
        // 레버에서 출구까지의 최단 거리
        int leverToExit = BFS(maps, lever, exit);

        // 탈출할 수 없는 경우 -1을 반환
        if (startToLever == -1 || leverToExit == -1)
            return -1;

        // 시작 지점에서 출구까지의 최소 시간 계산
        int totalMinTime = startToLever + leverToExit;

        return totalMinTime;
    }

    // 특정 문자의 위치를 찾는 함수
    private int[] FindPosition(string[] maps, char target)
    {
        for (int i = 0; i < maps.Length; i++)
        {
            int index = maps[i].IndexOf(target);
            if (index != -1)
                return new int[] { i, index };
        }

        // 찾지 못한 경우 적절한 예외 또는 기본값 반환
        return new int[] { -1, -1 };
    }

    // BFS를 활용한 최단 거리 계산 함수
    private int BFS(string[] maps, int[] start, int[] target)
    {
        int rows = maps.Length;
        int cols = maps[0].Length;

        int[,] distance = new int[rows, cols];
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                distance[i, j] = int.MaxValue;
            }
        }

        Queue<int[]> queue = new Queue<int[]>();
        queue.Enqueue(start);
        distance[start[0], start[1]] = 0;

        int[] dx = { 0, 0, 1, -1 };
        int[] dy = { 1, -1, 0, 0 };

        while (queue.Count > 0)
        {
            int[] current = queue.Dequeue();

            for (int i = 0; i < 4; i++)
            {
                int nx = current[0] + dx[i];
                int ny = current[1] + dy[i];

                if (nx >= 0 && nx < rows && ny >= 0 && ny < cols
                    && maps[nx][ny] != 'X' && distance[nx, ny] == int.MaxValue)
                {
                    distance[nx, ny] = distance[current[0], current[1]] + 1;
                    queue.Enqueue(new int[] { nx, ny });

                    // 타겟에 도달한 경우 최단 거리 반환
                    if (nx == target[0] && ny == target[1])
                        return distance[nx, ny];
                }
            }
        }

        // 타겟에 도달할 수 없는 경우 -1 반환
        return -1;
    }
}
